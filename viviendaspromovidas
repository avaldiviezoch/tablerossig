<!DOCTYPE html>
<html lang="es">
<head>
<meta charset="utf-8"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Viviendas Promovidas ¬∑ Filtros + L√≠mites</title>

<link rel="stylesheet" href="https://js.arcgis.com/4.29/esri/themes/light/main.css">
<script src="https://js.arcgis.com/4.29/"></script>

<style>
:root{
  --ink:#0b2532; --muted:#64748b; --card:#fff; --g-dark:#0f3f3a; --g-2:#7da39e;
  --line:#e6ecea; --panel:#f7fbfa; --bar:#0b3b38;
}
html,body{
  margin:0;
  height:100%;
  overflow:hidden;
  background:#eef5f3;
  color:var(--ink);
  font-family:system-ui,-apple-system,Segoe UI,Roboto,Inter,Arial;
}
.shell{
  display:grid;
  grid-template-columns: 1fr min(40vw, 380px);
  height:100vh;
  width:100vw;
}
#mapWrap{
  position:relative;
  height:100%;
  overflow:hidden;
  background:#000;
}
#viewDiv{
  position:absolute;
  inset:0;
}

/* ===== Filtro retr√°ctil ===== */
.filters{
  position:absolute;
  left:14px;
  top:14px;
  z-index:6;
  width:min(360px,92vw);
  color:#e6fffb;
  font-family:inherit;
}
.acc{
  background:#0b3b38;
  color:#e6fffb;
  border-radius:14px;
  box-shadow:0 12px 28px rgba(0,0,0,.28);
  border:1px solid #0e4a43;
  overflow:hidden;
}
.acc summary{
  list-style:none;
  cursor:pointer;
  padding:12px 14px;
  display:flex;
  justify-content:space-between;
  align-items:center;
  font-weight:800;
  font-size:14px;
}
.acc summary::-webkit-details-marker{display:none}
.acc summary .caret{
  font-weight:900;
  font-size:14px;
  line-height:1;
  margin-left:6px;
}
.acc .content{
  padding:12px 14px 14px;
  display:grid;
  gap:10px;
  border-top:1px solid rgba(255,255,255,.08);
}
.acc label{
  font-size:12px;
  color:#cbe8e5;
  font-weight:700;
}
.selRow{
  display:grid;
  grid-template-columns:1fr;
  gap:10px;
}
.acc select{
  width:100%;
  border-radius:10px;
  padding:10px 12px;
  border:1px solid #155149;
  background:#0f2e29;
  color:#e6fffb;
  height:42px;
  box-sizing:border-box;
  font-weight:600;
  font-size:13px;
}
.rowBtns{
  display:flex;
  gap:10px;
  justify-content:flex-end;
}
.btn{
  background:#0b3b38;
  color:#ecfffb;
  border:1px solid #0e4a43;
  padding:8px 12px;
  border-radius:10px;
  font-weight:800;
  cursor:pointer;
  box-shadow:0 6px 16px rgba(2,6,23,.18);
  font-size:13px;
}
.btn.secondary{
  background:#114d46;
  border-color:#0d3a35;
}
.hint{
  font-size:12px;
  color:#b9d5d1;
  font-weight:500;
}

/* ===== Sidebar KPIs ===== */
.sidebar{
  background:var(--panel);
  border-left:1px solid var(--line);
  box-shadow:-6px 0 24px rgba(2,6,23,.06);
  padding:16px 16px 18px;
  box-sizing:border-box;
  display:flex;
  flex-direction:column;
  overflow:hidden;
}
.heroLine{
  background:#fff;
  border:1px solid var(--line);
  border-radius:14px;
  padding:12px 14px;
  box-shadow:0 10px 24px rgba(2,6,23,.06);
  margin-bottom:16px;
  font-weight:800;
  color:#0b3b38;
  font-size:14px;
  line-height:1.3;
}
.heroNum{
  display:block;
  font-size:32px;
  line-height:1;
  font-weight:900;
  color:#0f3f3a;
}

.bar{
  background:var(--bar);
  color:#e7fff9;
  font-weight:800;
  text-align:center;
  padding:10px 12px;
  border-radius:10px;
  margin:0 0 12px;
  font-size:13px;
}
.kpiList{
  display:grid;
  gap:12px;
  overflow-y:auto;
  padding-right:6px;
  scrollbar-width:thin;
}
.kpiCard{
  background:#fff;
  border:1px solid var(--line);
  border-radius:14px;
  box-shadow:0 10px 24px rgba(2,6,23,.06);
  padding:12px;
  display:flex;
  flex-direction:column;
  gap:8px;
}
.kpiHead{
  display:flex;
  align-items:center;
  gap:10px;
  font-weight:800;
  color:#0b3b38;
  font-size:13px;
}
.kpiIcon{
  width:34px;
  height:34px;
  flex:0 0 34px;
  border-radius:50%;
  background:#7da39e;
  color:#fff;
  display:grid;
  place-items:center;
  font-weight:900;
  font-size:16px;
}
.kpiVal{
  font-size:28px;
  line-height:1;
  font-weight:900;
  color:#0f3f3a;
}
.kpiLbl{
  color:#64748b;
  font-weight:700;
  font-size:12px;
  line-height:1.3;
}

@media(max-width:900px){
  .shell{
    grid-template-columns:1fr;
    grid-template-rows:auto 260px;
    height:auto;
    min-height:100vh;
  }
  html,body{
    height:auto;
    min-height:100vh;
    overflow-y:auto;
    overflow-x:hidden;
  }
  #mapWrap{
    height:calc(100vh - 260px);
  }
  .sidebar{
    height:260px;
    border-left:none;
    border-top:1px solid var(--line);
    box-shadow:0 -6px 24px rgba(2,6,23,.06);
    flex-direction:column;
    border-radius:18px 18px 0 0;
    padding:14px 14px 40px;
  }
  .heroLine{
    font-size:12px;
    line-height:1.2;
    margin-bottom:8px;
  }
  .heroNum{
    font-size:26px;
    line-height:1;
  }
  .kpiHead{font-size:12px}
  .kpiVal {font-size:22px}
  .kpiLbl {font-size:11px}
  .kpiIcon{
    width:30px;
    height:30px;
    flex:0 0 30px;
    font-size:14px;
  }
}

/* popup estilo tarjeta */
.esri-popup__header{display:none!important;}
.esri-popup__main-container{padding-top:0!important;}
</style>
</head>
<body>
<div class="shell">

  <!-- MAPA -->
  <div id="mapWrap">
    <div id="viewDiv" aria-label="Mapa de Viviendas Promovidas"></div>

    <!-- FILTROS -->
    <div class="filters">
      <details id="acc" class="acc">
        <summary>
          <span>Filtrar</span>
          <span class="caret">‚ñæ</span>
        </summary>
        <div class="content">
          <!-- Ubigeo (de l√≠mites pol√≠ticos) -->
          <div class="selRow">
            <div>
              <label for="selDep">Departamento</label>
              <select id="selDep"><option value="">(Todos)</option></select>
            </div>
            <div>
              <label for="selProv">Provincia</label>
              <select id="selProv" disabled><option value="">(Todas)</option></select>
            </div>
            <div>
              <label for="selDist">Distrito</label>
              <select id="selDist" disabled><option value="">(Todos)</option></select>
            </div>
          </div>

          <!-- Atributos de la capa Viviendas -->
          <div class="selRow">
            <div>
              <label for="selAnio">A√±o</label>
              <select id="selAnio"><option value="">(Todos)</option></select>
            </div>
            <div>
              <label for="selModalidad">Modalidad</label>
              <select id="selModalidad"><option value="">(Todos)</option></select>
            </div>
            <div>
              <label for="selModalidad1">Modalidad_1</label>
              <select id="selModalidad1"><option value="">(Todos)</option></select>
            </div>
          </div>

          <!-- Gesti√≥n -->
          <div class="selRow">
            <div>
              <label for="selFlag">Gesti√≥n</label>
              <select id="selFlag">
                <option value="">General (todas)</option>
                <option value="1">Gesti√≥n anterior</option>
                <option value="2">Gesti√≥n actual</option>
              </select>
            </div>
          </div>

          <div class="rowBtns">
            <button id="btnClear" class="btn secondary" type="button">Limpiar</button>
          </div>

          <div class="hint">El filtro aplica al mapa y a los KPIs.</div>
        </div>
      </details>
    </div>
  </div>

  <!-- SIDEBAR KPIs -->
  <aside class="sidebar">
    <div class="heroLine">
      Viviendas promovidas
      <span class="heroNum" id="kpiTotalViv">‚Äî</span>
    </div>

    <div class="bar">Indicadores</div>

    <div class="kpiList">
      <div class="kpiCard">
        <div class="kpiHead">
          <div class="kpiIcon">üè†</div>
          <div>Total registros</div>
        </div>
        <div class="kpiVal" id="kpi1">‚Äî</div>
        <div class="kpiLbl">Cantidad de filas filtradas</div>
      </div>

      <div class="kpiCard">
        <div class="kpiHead">
          <div class="kpiIcon">üìÖ</div>
          <div>A√±o m√°s reciente</div>
        </div>
        <div class="kpiVal" id="kpi2">‚Äî</div>
        <div class="kpiLbl">M√°ximo "a√±o" dentro del filtro</div>
      </div>

      <div class="kpiCard">
        <div class="kpiHead">
          <div class="kpiIcon">üìà</div>
          <div>‚Äî</div>
        </div>
        <div class="kpiVal" id="kpi3">‚Äî</div>
        <div class="kpiLbl">Placeholder</div>
      </div>
    </div>
  </aside>

</div>

<script>
/* =======================
   ENDPOINTS
   ======================= */
const URL_BASE = "https://devportalgis.vivienda.gob.pe/servergis/rest/services/viv_promovidas_titulos_bfh_tablas/MapServer";
const URL_VIV  = URL_BASE + "/5"; // Viviendas Promovidas (puntos)
const LIM_BASE = "https://pportalgis.vivienda.gob.pe/pfdserver/rest/services/COES/Limites_Pol%C3%ADticos/MapServer";
const URL_DEP  = LIM_BASE + "/0";
const URL_PROV = LIM_BASE + "/1";
const URL_DIST = LIM_BASE + "/2";

const fmt = new Intl.NumberFormat("es-PE");

/* =======================
   HELPERS
   ======================= */
function esc(v){ return String(v).replaceAll("'", "''"); }
function cacheBust(){ return String(Date.now()); }

function esriPOST(url, paramsObj){
  const body = new URLSearchParams({
    f:"json",
    ...paramsObj,
    __ts: cacheBust()
  });
  return fetch(url, {
    method:"POST",
    headers:{ "Content-Type":"application/x-www-form-urlencoded;charset=UTF-8" },
    body: body.toString(),
    cache:"no-store"
  })
  .then(r => { if(!r.ok) throw new Error("HTTP "+r.status); return r.json(); })
  .then(j => {
    if(j.error){
      console.error("ArcGIS:", j.error);
      throw new Error(j.error.message||"ArcGIS");
    }
    return j;
  })
  .catch(err=>{
    console.error("esriPOST fail",err);
    return {};
  });
}

// DISTINCT values from a layer
async function loadDistinct(url, field){
  const page = 2000;
  let offset = 0;
  const vals = new Set();
  while(true){
    const j = await esriPOST(url+"/query", {
      where:"1=1",
      outFields: field,
      orderByFields: field,
      returnDistinctValues: "true",
      returnGeometry:"false",
      resultRecordCount: page,
      resultOffset: offset
    });
    const rows = (j.features||[])
      .map(f=> (f.attributes||{})[field])
      .filter(v=>v!=null && v!=="");
    rows.forEach(v=> vals.add(v));
    if(!j.exceededTransferLimit || rows.length<page) break;
    offset += page;
  }
  return [...vals];
}

// fill <select>
function fillSelectStatic(sel, arr, firstLabel){
  sel.innerHTML = `<option value="">${firstLabel}</option>` +
    arr.sort().map(v=>`<option value="${v}">${v}</option>`).join("");
}
function fillSelectPairs(sel, arr, firstLabel){
  sel.innerHTML = `<option value="">${firstLabel}</option>` +
    arr.map(o=>`<option value="${o.id}">${o.name}</option>`).join("");
}

/* ========= DOM refs ========= */
const selDep        = document.getElementById("selDep");
const selProv       = document.getElementById("selProv");
const selDist       = document.getElementById("selDist");
const selAnio       = document.getElementById("selAnio");
const selModalidad  = document.getElementById("selModalidad");
const selModalidad1 = document.getElementById("selModalidad1");
const selFlag       = document.getElementById("selFlag");
const btnClear      = document.getElementById("btnClear");

/* =======================
   MAP + LAYERS
   ======================= */
require([
  "esri/Map",
  "esri/views/MapView",
  "esri/layers/FeatureLayer",
  "esri/layers/GraphicsLayer",
  "esri/widgets/ScaleBar",
  "esri/widgets/BasemapToggle"
], function(Map,MapView,FeatureLayer,GraphicsLayer,ScaleBar,BasemapToggle){

  const map = new Map({ basemap:"satellite" });

  const view = new MapView({
    container:"viewDiv",
    map,
    center:[-75.2,-9.3],
    zoom:5,
    padding:{ left:16, right:6, top:6, bottom:6 }
  });

  const initialViewpointPromise = view.when().then(()=>view.viewpoint.clone());

  // glow helper
  function glowCIM(rgb){
    return {
      type:"cim",
      data:{
        type:"CIMSymbolReference",
        symbol:{
          type:"CIMLineSymbol",
          symbolLayers:[
            { type:"CIMSolidStroke", enable:true, width:6,   color:[...rgb,40]  },
            { type:"CIMSolidStroke", enable:true, width:3,   color:[...rgb,120] },
            { type:"CIMSolidStroke", enable:true, width:1.6, color:[...rgb,255] }
          ]
        }
      }
    };
  }

  // capas de l√≠mites visibles
  const limDeptDraw = new FeatureLayer({
    url: URL_DEP,
    title:"L√≠mite Departamental (base)",
    popupEnabled:false,
    listMode:"hide",
    renderer:{
      type:"simple",
      symbol:{
        type:"cim",
        data:{
          type:"CIMSymbolReference",
          symbol:{
            type:"CIMLineSymbol",
            symbolLayers:[
              { type:"CIMSolidStroke", enable:true, width:2.4, color:[255,255,255,120] },
              { type:"CIMSolidStroke", enable:true, width:0.8, color:[0,0,0,180] }
            ]
          }
        }
      }
    }
  });

  const limProvDraw = new FeatureLayer({
    url: URL_PROV,
    title:"L√≠mite Provincial (resaltado)",
    popupEnabled:false,
    listMode:"hide",
    visible:false,
    renderer:{
      type:"simple",
      symbol:glowCIM([255,215,0])
    }
  });

  const limDistDraw = new FeatureLayer({
    url: URL_DIST,
    title:"L√≠mite Distrital (resaltado)",
    popupEnabled:false,
    listMode:"hide",
    visible:false,
    renderer:{
      type:"simple",
      symbol:glowCIM([255,105,180])
    }
  });

  map.add(limDeptDraw);
  map.add(limProvDraw);
  map.add(limDistDraw);

  // capa Viviendas Promovidas
  const vivLayer = new FeatureLayer({
    url: URL_VIV,
    title:"Viviendas Promovidas",
    outFields:["*"],
    popupEnabled:true,
    renderer:{
      type:"simple",
      symbol:{
        type:"simple-marker",
        style:"circle",
        size:8,
        color:[255,234,0,0.95],
        outline:{ color:[0,0,0,220], width:0.6 }
      }
    },
    popupTemplate:{
      title:"{distrito}",
      content: function(e){
        const a = e.graphic.attributes || {};
        const rows = [
          ["Departamento", a.departamento],
          ["Provincia",    a.provincia],
          ["Distrito",     a.distrito],
          ["A√±o",          a.anio],
          ["Modalidad",    a.modalidad],
          ["Modalidad_1",  a.modalidad_1],
          ["Gesti√≥n (flag_viviendas)", a.flag_viviendas],
          ["Viviendas",    a.viviendas]
        ];
        return `
        <div style="font:12.5px/1.4 system-ui,-apple-system,Segoe UI,Roboto,Inter,Arial;color:#0b2532;">
          <div style="background:#0b3b38;color:#e6fffb;padding:10px 12px;font-weight:900;border-radius:10px 10px 0 0;">
            Viviendas promovidas
          </div>
          <div style="border:1px solid #e6ecea;border-top:0;border-radius:0 0 10px 10px;padding:12px;background:#fff;">
            ${rows.map(([lbl,val])=>`
              <div style="display:flex;justify-content:space-between;gap:8px;margin-bottom:6px;font-size:12px;">
                <div style="color:#475569;font-weight:700;">${lbl}</div>
                <div style="color:#0b2532;font-weight:800;text-align:right;">${val==null||val===""?"‚Äî":val}</div>
              </div>
            `).join("")}
          </div>
        </div>`;
      }
    }
  });

  map.add(vivLayer);

  // widgets
  const toggle = new BasemapToggle({ view, nextBasemap:"osm" });
  view.ui.add(toggle, "bottom-right");
  view.ui.add(new ScaleBar({view,unit:"metric"}),"bottom-left");
  view.ui.move("zoom","bottom-right");

  /* =======================
     CAPAS FUENTE PARA QUERIES
     ======================= */
  const limDeptSrc = new FeatureLayer({
    url: URL_DEP,
    outFields:["id_dpto","nom_dep"],
    listMode:"hide"
  });
  const limProvSrc = new FeatureLayer({
    url: URL_PROV,
    outFields:["id_dep","id_prov","nom_prov"],
    listMode:"hide"
  });
  const limDistSrc = new FeatureLayer({
    url: URL_DIST,
    outFields:["id_dpto","id_prov","id_dist","nom_dist"],
    listMode:"hide"
  });

  async function loadDeps(){
    const q = limDeptSrc.createQuery();
    q.where="1=1";
    q.returnGeometry=false;
    q.outFields=["id_dpto","nom_dep"];
    q.orderByFields=["nom_dep ASC"];
    q.num=300;
    const r = await limDeptSrc.queryFeatures(q);
    const seen=new Set(), rows=[];
    (r.features||[]).forEach(f=>{
      const at=f.attributes||{};
      const id=at.id_dpto, name=at.nom_dep;
      if(id && !seen.has(id)){
        seen.add(id);
        rows.push({id,name});
      }
    });
    fillSelectPairs(selDep, rows, "(Todos)");
    selProv.innerHTML='<option value="">(Todas)</option>';
    selProv.disabled=true;
    selDist.innerHTML='<option value="">(Todos)</option>';
    selDist.disabled=true;
  }

  async function loadProvs(){
    const dep = selDep.value.trim();
    selProv.innerHTML='<option value="">(Todas)</option>';
    selDist.innerHTML='<option value="">(Todos)</option>';
    selDist.disabled=true;
    if(!dep){
      selProv.disabled=true;
      return;
    }
    const q = limProvSrc.createQuery();
    q.where=`id_dep='${esc(dep)}'`;
    q.returnGeometry=false;
    q.outFields=["id_dep","id_prov","nom_prov"];
    q.orderByFields=["nom_prov ASC"];
    q.num=1000;
    const r = await limProvSrc.queryFeatures(q);
    const seen=new Set(), rows=[];
    (r.features||[]).forEach(f=>{
      const at=f.attributes||{};
      const id=at.id_prov, name=at.nom_prov;
      if(id && !seen.has(id)){
        seen.add(id);
        rows.push({id,name});
      }
    });
    fillSelectPairs(selProv, rows, "(Todas)");
    selProv.disabled=false;
  }

  async function loadDists(){
    const prov = selProv.value.trim();
    selDist.innerHTML='<option value="">(Todos)</option>';
    if(!prov){
      selDist.disabled=true;
      return;
    }
    const q = limDistSrc.createQuery();
    q.where=`id_prov='${esc(prov)}'`;
    q.returnGeometry=false;
    q.outFields=["id_prov","id_dist","nom_dist"];
    q.orderByFields=["nom_dist ASC"];
    q.num=3000;
    const r = await limDistSrc.queryFeatures(q);
    const seen=new Set(), rows=[];
    (r.features||[]).forEach(f=>{
      const at=f.attributes||{};
      const id=at.id_dist, name=at.nom_dist;
      if(id && !seen.has(id)){
        seen.add(id);
        rows.push({id,name});
      }
    });
    fillSelectPairs(selDist, rows, "(Todos)");
    selDist.disabled=false;
  }

  /* =======================
     WHERE builder Viviendas
     (ACTUALIZADO con id_dep / id_prov / id_dist)
     ======================= */
  function buildWhere(){
    const parts = ["1=1"];

    // OJO: aqu√≠ usamos los nombres reales de la capa Viviendas Promovidas
    if(selDep.value.trim()!==""){
      parts.push(`id_dep='${esc(selDep.value.trim())}'`);
    }
    if(selProv.value.trim()!==""){
      parts.push(`id_prov='${esc(selProv.value.trim())}'`);
    }
    if(selDist.value.trim()!==""){
      parts.push(`id_dist='${esc(selDist.value.trim())}'`);
    }

    if(selAnio.value.trim()!==""){
      parts.push(`anio='${esc(selAnio.value.trim())}'`);
    }
    if(selModalidad.value.trim()!==""){
      parts.push(`modalidad='${esc(selModalidad.value.trim())}'`);
    }
    if(selModalidad1.value.trim()!==""){
      parts.push(`modalidad_1='${esc(selModalidad1.value.trim())}'`);
    }
    if(selFlag.value.trim()!==""){
      parts.push(`flag_viviendas='${esc(selFlag.value.trim())}'`);
    }

    return parts.join(" AND ");
  }

  /* =======================
     KPIs
     ======================= */
  async function updateKPIs(){
    try{
      const q = vivLayer.createQuery();
      q.where = vivLayer.definitionExpression || "1=1";
      q.returnGeometry = false;
      q.outFields = ["*"];
      const res = await vivLayer.queryFeatures(q);
      const feats = res.features || [];

      let totalViv = 0;
      let maxAnio = null;
      for(const f of feats){
        const a=f.attributes||{};
        if(a.viviendas!=null){
          const v=Number(a.viviendas);
          if(Number.isFinite(v)) totalViv+=v;
        }
        if(a.anio!=null && a.anio!==""){
          const y=Number(a.anio);
          if(Number.isFinite(y)){
            if(maxAnio==null || y>maxAnio) maxAnio=y;
          }
        }
      }

      document.getElementById("kpiTotalViv").textContent = fmt.format(totalViv);
      document.getElementById("kpi1").textContent        = fmt.format(feats.length);
      document.getElementById("kpi2").textContent        = maxAnio==null?"‚Äî":maxAnio;
      document.getElementById("kpi3").textContent        = "‚Äî";
    }catch(err){
      console.warn("updateKPIs fail",err);
      document.getElementById("kpiTotalViv").textContent = "‚Äî";
      document.getElementById("kpi1").textContent        = "‚Äî";
      document.getElementById("kpi2").textContent        = "‚Äî";
      document.getElementById("kpi3").textContent        = "‚Äî";
    }
  }

  /* =======================
     RESALTAR Y ZOOM
     ======================= */
  async function zoomToBoundary(){
    let src=null, where=null, targetLayer=null;

    if(selDist.value.trim()!==""){
      src = limDistSrc;
      where = `id_dist='${esc(selDist.value.trim())}'`;
      targetLayer = limDistDraw;
    } else if(selProv.value.trim()!==""){
      src = limProvSrc;
      where = `id_prov='${esc(selProv.value.trim())}'`;
      targetLayer = limProvDraw;
    } else if(selDep.value.trim()!==""){
      src = limDeptSrc;
      where = `id_dpto='${esc(selDep.value.trim())}'`;
      targetLayer = limDeptDraw;
    } else {
      const vp = await initialViewpointPromise;
      try{ await view.goTo(vp, { duration:700 }); }catch(_){}
      limProvDraw.visible=false;
      limProvDraw.definitionExpression=null;
      limDistDraw.visible=false;
      limDistDraw.definitionExpression=null;
      return;
    }

    if(targetLayer === limDistDraw){
      limDistDraw.definitionExpression = where;
      limDistDraw.visible = true;
      limProvDraw.visible = false;
      limProvDraw.definitionExpression = null;
    } else if(targetLayer === limProvDraw){
      limProvDraw.definitionExpression = where;
      limProvDraw.visible = true;
      limDistDraw.visible = false;
      limDistDraw.definitionExpression = null;
    } else {
      limProvDraw.visible = false;
      limProvDraw.definitionExpression = null;
      limDistDraw.visible = false;
      limDistDraw.definitionExpression = null;
    }

    try{
      const q = src.createQuery();
      q.where = where;
      q.returnGeometry = true;
      q.outFields = ["*"];
      q.num = 1;
      const r = await src.queryFeatures(q);
      const g = r.features?.[0]?.geometry;
      if(g){
        await view.goTo({ target:g, padding:{ left:50,right:50,top:70,bottom:60 } }, { duration:700, easing:"ease-in-out" });
      }
    }catch(err){
      console.warn("zoomToBoundary fail", err);
    }
  }

  /* =======================
     REFRESH GENERAL
     ======================= */
  async function refreshAll(){
    const where = buildWhere();
    vivLayer.definitionExpression = where;
    await zoomToBoundary();
    await updateKPIs();
  }

  /* =======================
     LISTENERS UBIGEO
     ======================= */
  selDep.addEventListener("change", async ()=>{
    await loadProvs();
    await refreshAll();
  });

  selProv.addEventListener("change", async ()=>{
    await loadDists();
    await refreshAll();
  });

  selDist.addEventListener("change", async ()=>{
    await refreshAll();
  });

  /* =======================
     LISTENERS ATRIBUTOS
     ======================= */
  [selAnio, selModalidad, selModalidad1, selFlag].forEach(el=>{
    el.addEventListener("change", refreshAll);
  });

  /* =======================
     LIMPIAR
     ======================= */
  btnClear.addEventListener("click", async ()=>{
    selDep.value="";
    selProv.innerHTML='<option value="">(Todas)</option>';
    selProv.disabled=true;
    selDist.innerHTML='<option value="">(Todos)</option>';
    selDist.disabled=true;

    selAnio.value="";
    selModalidad.value="";
    selModalidad1.value="";
    selFlag.value="";

    limProvDraw.visible=false;
    limProvDraw.definitionExpression=null;
    limDistDraw.visible=false;
    limDistDraw.definitionExpression=null;

    await refreshAll();
  });

  /* =======================
     INIT
     ======================= */
  (async function init(){
    await loadDeps();

    const [anios,mods,mods1] = await Promise.all([
      loadDistinct(URL_VIV,"anio"),
      loadDistinct(URL_VIV,"modalidad"),
      loadDistinct(URL_VIV,"modalidad_1")
    ]);
    fillSelectStatic(selAnio, anios, "(Todos)");
    fillSelectStatic(selModalidad, mods, "(Todos)");
    fillSelectStatic(selModalidad1, mods1, "(Todos)");

    await refreshAll();

    document.getElementById("acc").open = false;
  })();

});
</script>
</body>
</html>
